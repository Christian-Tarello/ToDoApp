(()=>{"use strict";var __webpack_modules__={197:()=>{eval("\n;// CONCATENATED MODULE: ./src/modules/controllers/taskController.js\nclass TaskController {\n    constructor(task, elementFactory, popUpLayer) {\n        this.task = task;\n        this.task.addObserver(this);\n        this.elementFactory = elementFactory;\n        this.popUpLayer = popUpLayer;\n        this.view = undefined;\n    }\n\n    setView(view) {\n        this.view = view;\n    }\n\n    toggle() {\n        this.task.toggleDone();\n    }\n\n    changeTitle(title) {\n        this.task.title = title;\n    }\n\n    changeDescription(description) {\n        this.task.description = description;\n    }\n\n    changePriority(priority) {\n        this.task.priority = priority;\n    }\n\n    changeDueDate(date) {\n        this.task.dueDate = date;\n    }\n\n    updateView() {\n        this.view.setDone(this.task.isDone);\n        this.view.setTitle(this.task.title);\n        this.view.setDescription(this.task.description);\n        this.view.setPriority(this.task.priority);\n        this.view.setDueDate(this.task.dueDate);\n    }\n\n    update() {\n        this.updateView();\n    }\n\n    finalize() {\n        this.task.removeObserver(this);\n    }\n\n    delete() {\n        this.finalize();\n        this.task.unlink();\n        this.view.remove();\n    }\n}\n;// CONCATENATED MODULE: ./src/modules/utils/priority.js\nconst Priority = Object.freeze({\n    HIGH: 'High',\n    MEDIUM: 'Medium',\n    LOW: \"Low\",\n    UNSET: \"Unset\"\n});\n\n/* harmony default export */ const utils_priority = (Priority);\n;// CONCATENATED MODULE: ./src/modules/views/taskView.js\n\n\nclass TaskView {\n    constructor(controller, checklistElement) {\n        this.controller = controller;\n        this.controller.setView(this);\n        this.checklistElement = checklistElement;\n    }\n\n    createContainer() {\n        const element = document.createElement('div');\n        element.classList.add('task');\n        return element;\n    }\n\n    createHeaderContainer() {\n        const element = document.createElement('div');\n        element.classList.add('task-header');\n        return element;\n    }\n\n    createDisplayCheckbox() {\n        this.displayCheckbox = document.createElement('input');\n        this.displayCheckbox.setAttribute('type', 'checkbox');\n        this.displayCheckbox.classList.add('task-displayToggle');\n        return this.displayCheckbox;\n    }\n\n    createDoneToggle() {\n        this.doneToggle = document.createElement('input');\n        this.doneToggle.setAttribute('type', 'checkbox');\n        this.doneToggle.classList.add('task-doneToggle');\n        return this.doneToggle;\n    }\n\n    createTitleInput() {\n        this.titleInput = document.createElement('input');\n        this.titleInput.setAttribute('type', 'text');\n        this.titleInput.classList.add('task-titleInput');\n        return this.titleInput;\n    }\n\n    createDateInput() {\n        this.dateInput = document.createElement('input');\n        this.dateInput.setAttribute('type', 'date');\n        this.dateInput.classList.add('task-dateInput');\n        return this.dateInput;\n    }\n\n    createPriority(value) {\n        const element = document.createElement('input');\n        element.setAttribute('type', 'checkbox');\n        element.setAttribute('value', value);\n        element.classList.add('prioritySelector-priority');\n        return element;\n    }\n\n    createPrioritiesContainer() {\n        const element = document.createElement('span');\n        element.classList.add('prioritySelector');\n        return element;\n    }\n\n    createPriorityElements() {\n        this.priorityElements = Object.values(utils_priority).toReversed().map((value) => this.createPriority(value));\n        return this.priorityElements;\n    }\n\n    createDeleteButton() {\n        this.deleteButton = document.createElement('button');\n        this.deleteButton.setAttribute('type', 'button');\n        this.deleteButton.classList.add('task-deleteButton');\n        this.deleteButton.innerText = \"X\";\n        return this.deleteButton;\n    }\n\n    createBodyContainer() {\n        this.bodyContainer = document.createElement('div');\n        this.bodyContainer.classList.add('task-body');\n        this.setBodyVisibility(false);\n        return this.bodyContainer;\n    }\n\n    createDescriptionInput() {\n        this.descriptionInput = document.createElement('textarea');\n        this.descriptionInput.classList.add('task-descriptionInput');\n        this.descriptionInput.setAttribute('placeholder', 'Type here...')\n        return this.descriptionInput;\n    }\n\n    create() {\n        const element = this.createContainer();\n        const header = this.createHeaderContainer();\n        const body = this.createBodyContainer();\n\n        const prioritiesContainer = this.createPrioritiesContainer();\n        prioritiesContainer.append(...this.createPriorityElements())\n        \n        header.append(\n            this.createDisplayCheckbox(),\n            this.createDoneToggle(),\n            this.createTitleInput(),\n            this.createDateInput(),\n            prioritiesContainer,\n            this.createDeleteButton()\n        );\n\n        body.append(\n            this.createDescriptionInput(),\n            this.checklistElement\n        );\n\n        element.append(header, body);\n\n        return element;\n    }\n\n    setInteractions() {\n        this.deleteButton.addEventListener('click', () => {this.controller.delete()});\n        this.doneToggle.addEventListener('change', () => {this.controller.toggle()});\n        this.titleInput.addEventListener('change', (e) => {this.controller.changeTitle(e.target.value)});\n        this.descriptionInput.addEventListener('change', (e) => {this.controller.changeDescription(e.target.value)});\n        this.dateInput.addEventListener('change', (e) => {this.controller.changeDueDate(e.target.value)});\n        this.priorityElements.forEach((element) => {\n            element.addEventListener('change', (e) => {\n                if (e.target.checked) {\n                    this.setPriority(e.target.value);\n                    this.controller.changePriority(e.target.value);\n                }\n            });\n        });\n        this.displayCheckbox.addEventListener('change', (e) => {this.setBodyVisibility(e.target.checked)})\n    }\n\n    build() {\n        this.element = this.create();\n        this.controller.updateView();\n        this.setInteractions();\n        return this.element;\n    }\n\n    setTitle(title) {\n        this.titleInput.setAttribute('value', title)\n    }\n\n    setDescription(description) {\n        this.descriptionInput.value = description;\n    }\n\n    setPriority(priority) {\n        this.priorityElements.forEach((item) => {\n            if (item.value === priority) {\n                item.checked = true;\n                item.disabled = true;\n            } else {\n                item.checked = false;\n                item.disabled = false;\n            }\n        });\n    }\n\n    setDueDate(date) {\n        this.dateInput.value = date;\n    }\n\n    setDone(isDone) {\n        this.doneToggle.checked = isDone;\n    }\n\n    setBodyVisibility(isVisible) {\n        if (isVisible) {\n            this.bodyContainer.classList.remove('task-body--hidden');\n        }\n        else {\n            this.bodyContainer.classList.add('task-body--hidden');\n        }\n    }\n\n    remove() {\n        this.element.remove();\n    }\n}\n;// CONCATENATED MODULE: ./src/modules/controllers/projectController.js\nclass ProjectController {\n    constructor(project, elementFactory, popUpLayer) {\n        this.elementFactory = elementFactory;\n        this.popUpLayer = popUpLayer;\n        this.project = project;\n        this.project.addObserver(this);\n        this.view = undefined;\n    }\n\n    setView(view) {\n        this.view = view;\n    }\n\n    addTaskInput() {\n        const element = this.elementFactory.buildTaskInput(this.project);\n        this.popUpLayer.addPopUp(element, true, \"#80808080\");\n    }\n\n    updateView() {\n        const elements = this.project.items.map(\n            (item) => {\n                return this.elementFactory.buildTask(item);\n            }\n        )\n        this.view.replaceItems(elements);\n        this.view.setName(this.project.name);\n    }\n\n    update() {\n        this.updateView();\n    }\n\n    finalize() {\n        this.project.removeObserver(this);\n    }\n\n    remove() {\n        this.view.remove();\n    }\n\n    delete() {\n        this.finalize();\n        this.remove();\n        this.project.unlink();\n    }\n\n    changeName(name) {\n        this.project.setState({name});\n    }\n}\n;// CONCATENATED MODULE: ./src/modules/templates/projectTemplate.js\nclass ProjectTemplate {\n    static createContainer() {\n        const element = document.createElement('div');\n        element.classList.add('project');\n        return element;\n    }\n\n    static createHeaderContainer() {\n        const element = document.createElement('div');\n        element.classList.add('project-header');\n        return element;\n    }\n\n    static createNameInput() {\n        const element = document.createElement('input');\n        element.setAttribute('type', 'text');\n        element.setAttribute('placeholder', 'Project Name');\n        element.classList.add('project-nameInput');\n        return element;\n    }\n\n    static createDeleteButton() {\n        const element = document.createElement('button');\n        element.setAttribute('type', 'button');\n        element.classList.add('project-deleteButton');\n        element.innerText = 'X';\n        return element;\n    }\n\n    static createBodyContainer() {\n        const element = document.createElement('div');\n        element.classList.add('project-body');\n        return element;\n    }\n\n    static createBodyWrapper() {\n        const element = document.createElement('scroll-container');\n        return element;\n    }\n\n    static createTasksHook() {\n        const element = document.createElement('div');\n        element.classList.add('project-contentHook');\n        return element;\n    }\n\n    static createAddTaskInputButton() {\n        const element = document.createElement(\"button\");\n        element.setAttribute(\"type\", \"button\");\n        element.classList.add('project-addButton');\n        element.innerText = 'Add Task +';\n        return element;\n    }\n\n    static create() {\n        const element = ProjectTemplate.createContainer();\n        const headerContainer = ProjectTemplate.createHeaderContainer();\n        const nameInput = ProjectTemplate.createNameInput();\n        const deleteButton = ProjectTemplate.createDeleteButton();\n        const bodyContainer = ProjectTemplate.createBodyContainer();\n        const bodyWrapper = ProjectTemplate.createBodyWrapper();\n        const tasksHook = ProjectTemplate.createTasksHook();\n        const addTaskButton = ProjectTemplate.createAddTaskInputButton();\n\n        headerContainer.append(\n            nameInput,\n            deleteButton\n        );\n\n        bodyWrapper.append(\n            tasksHook,\n            addTaskButton\n        );\n\n        bodyContainer.append(\n            bodyWrapper\n        );\n\n        element.append(\n            headerContainer,\n            bodyContainer\n        );\n\n        return {\n            element,\n            nameInput,\n            deleteButton,\n            tasksHook,\n            addTaskButton\n        }\n    }\n}\n;// CONCATENATED MODULE: ./src/modules/views/projectView.js\n\n\nclass ProjectView {\n    constructor(controller) {\n        this.controller = controller;\n        this.controller.setView(this);\n        this.element = undefined;\n        \n        this.template = ProjectTemplate;\n    }\n\n    create() {\n        const structure = ProjectTemplate.create();\n        this.element = structure.element;\n        this.nameInput = structure.nameInput;\n        this.deleteButton = structure.deleteButton;\n        this.tasksHook = structure.tasksHook;\n        this.addTaskButton = structure.addTaskButton;\n    }\n\n    setInteractions() {\n        this.addTaskButton.addEventListener('click', () => {this.controller.addTaskInput()});\n        this.nameInput.addEventListener('change', (e) => this.controller.changeName(e.target.value));\n        this.deleteButton.addEventListener('click', () => this.controller.delete());\n    }\n\n    build() {\n        this.create();\n        this.controller.updateView();\n        this.setInteractions();\n        return this.element;\n    }\n\n    remove() {\n        this.element.remove();\n    }\n\n    replaceItems(elements) {\n        this.tasksHook.replaceChildren(...elements);\n    }\n\n    addItem(element) {\n        this.tasksHook.append(element);\n    }\n\n    setName(name) {\n        this.nameInput.setAttribute('value', name);\n    }\n}\n;// CONCATENATED MODULE: ./src/modules/utils/taskFields.js\nconst TaskFields = Object.freeze({\n    TITLE: \"taskTitle\",\n    DESCRIPTION: 'taskDescription',\n    DUE_DATE: \"taskDueDate\",\n    PRIORITY: \"taskPriority\",\n});\n\n/* harmony default export */ const taskFields = (TaskFields);\n;// CONCATENATED MODULE: ./src/modules/controllers/taskInputController.js\n\n\nclass TaskInputController {\n    constructor(project, taskFactory) {\n        this.project = project;\n        this.taskFactory = taskFactory;\n        this.view = undefined;\n    }\n\n    setView(view) {\n        this.view = view;\n    }\n\n    remove() {\n        this.view.remove();\n    }\n\n    processTaskSubmission(e) {\n        const data = new FormData(e.target);\n        const title = data.get(taskFields.TITLE);\n        const description = data.get(taskFields.DESCRIPTION);\n        const priority = data.get(taskFields.PRIORITY);\n        const dueDate = data.get(taskFields.DUE_DATE);\n\n        const task = this.taskFactory(title, description, dueDate, priority);\n        this.project.add(task);\n\n        this.remove();\n    }\n}\n;// CONCATENATED MODULE: ./src/modules/templates/taskFormTemplate.js\nclass TaskFormTemplate {\n    createInputWrapper() {\n        const element = document.createElement('li');\n        element.classList.add('taskForm-field');\n        return element;\n    }\n\n    createLabel(label, name) {\n        const element = document.createElement('label');\n        element.setAttribute('for', name);\n        element.classList.add('taskForm-label');\n        element.innerText = label;\n        return element;\n    }\n\n    createTextInput(name, value) {\n        const element = document.createElement('input');\n        element.setAttribute('type', 'text');\n        element.setAttribute('id', name);\n        element.setAttribute('name', name);\n        element.setAttribute('required', '');\n        element.setAttribute('value', value);\n        element.classList.add('taskForm-text');\n        return element\n    }\n\n    createSelect(name, optionElements) {\n        const element = document.createElement('select');\n        element.setAttribute('id', name);\n        element.setAttribute('name', name);\n        element.append(...optionElements);\n        element.classList.add('taskForm-select');\n        return element;\n    }\n\n    createOption(label, value, isSelected = false) {\n        const element = document.createElement('option');\n        element.setAttribute('value', value);\n        element.innerText = label;\n        if (isSelected) {element.setAttribute('selected', '');}\n        element.classList.add('taskForm-option');\n        return element;\n    }\n\n    createDateInput(name, value) {\n        const element = document.createElement('input');\n        element.setAttribute('type', 'date');\n        element.setAttribute('id', name);\n        element.setAttribute('name', name);\n        element.setAttribute('value', value);\n        element.classList.add('taskForm-date');\n        return element\n    }\n\n    createTextField(label, name, value) {\n        const element = this.createInputWrapper();\n        const labelElement = this.createLabel(label, name);\n        const inputElement = this.createTextInput(name, value);\n        element.append(\n            labelElement,\n            inputElement\n        );\n        return element;\n    }\n\n    createSelectField(label, name, options) {\n        const element = this.createInputWrapper();\n        const labelElement = this.createLabel(label, name);\n        const optionElements = options.map(\n            (option) => this.createOption(option.label, option.value, option.isSelected)\n        );\n        const selectElement = this.createSelect(name, optionElements);\n        element.append(\n            labelElement,\n            selectElement\n        );\n        return element;\n    }\n\n    createDateField(label, name, value) {\n        const element = this.createInputWrapper();\n        const labelElement = this.createLabel(label, name);\n        const inputElement = this.createDateInput(name, value);\n        element.append(\n            labelElement,\n            inputElement\n        );\n        return element;\n    }\n\n    createInput(data) {\n        switch (data.type) {\n            case 'selectField':\n                return this.createSelectField(\n                    data.label,\n                    data.name,\n                    data.options\n                    );\n            case 'textField':\n                return this.createTextField(\n                    data.label,\n                    data.name,\n                    data.value\n                );\n            case 'dateField':\n                return this.createDateField(\n                    data.label,\n                    data.name,\n                    data.value\n                );\n            default:\n                break;\n        }\n    }\n\n    createFormElement() {\n        const element = document.createElement('form');\n        element.setAttribute('action', '');\n        element.setAttribute('method', 'POST');\n        element.classList.add('taskForm');\n        return element;\n    }\n\n    createSubmitButton(node) {\n        const element = document.createElement('button');\n        element.setAttribute('type', 'submit');\n        element.classList.add('taskForm-button', 'taskForm-button--submit');\n        element.append(node);\n        return element;\n    }\n\n    createCancelButton(node) {\n        const element = document.createElement('button');\n        element.setAttribute('type', 'button');\n        element.classList.add('taskForm-button', 'taskForm-button--cancel');\n        element.append(node);\n        return element;\n    }\n\n    createFieldList() {\n        const element = document.createElement('ul');\n        element.setAttribute('type', 'button');\n        element.classList.add('taskForm-fieldList');\n        return element;\n    }\n}\n;// CONCATENATED MODULE: ./src/modules/views/taskInputView.js\n\n\n\n\nclass TaskInputView {\n    constructor(controller) {\n        this.controller = controller;\n        this.controller.setView(this);\n        this.template = new TaskFormTemplate();\n        this.element = undefined;\n    }\n\n    createFormElement() {\n        this.formElement = this.template.createFormElement();\n        return this.formElement;\n    }\n\n    createContainer() {\n        return this.createFormElement();\n    }\n\n    createContentHook() {\n        this.contentHook = this.template.createFieldList();\n        return this.contentHook;\n    }\n\n    createSubmitButton() {\n        this.submitButton = this.template.createSubmitButton(\n            document.createTextNode('Create Task')\n        );\n        return this.submitButton;\n    }\n\n    createCancelButton() {\n        this.cancelButton = this.template.createCancelButton(\n            document.createTextNode('Cancel')\n        );\n        return this.cancelButton;\n    }\n\n    create() {\n        const element = this.createContainer();\n        element.append(\n            this.createContentHook(),\n            this.createSubmitButton(),\n            this.createCancelButton()\n        );\n        return element;\n    }\n\n    setInteractions() {        \n        this.formElement.addEventListener(\"submit\", (e) => {\n            e.preventDefault();\n            this.controller.processTaskSubmission(e);\n        });\n        this.cancelButton.addEventListener(\"click\", () => {this.controller.remove()});\n    }\n\n    build() {\n        this.element = this.create();\n        this.setContent();\n        this.setInteractions();\n        return this.element;\n    }\n\n    createContentObj() {\n        return [\n            {\n                type: 'textField',\n                name: taskFields.TITLE,\n                label: 'Title',\n                value: ''\n            },\n            {\n                type: 'textField',\n                name: taskFields.DESCRIPTION,\n                label: 'Description',\n                value: ''\n            },\n            {\n                type: 'selectField',\n                name: taskFields.PRIORITY,\n                label: 'Priority',\n                options: [\n                    {label: 'Low', value: utils_priority.LOW, isSelected: false},\n                    {label: 'Medium', value: utils_priority.MEDIUM,  isSelected: false},\n                    {label: 'High', value: utils_priority.HIGH, isSelected: false},\n                    {label: 'Unset', value: utils_priority.UNSET, isSelected: true}\n                ]\n            },\n            {\n                type: 'dateField',\n                name: taskFields.DUE_DATE,\n                label: 'Due Date',\n                value: ''\n            }\n        ]\n    }\n\n    setContent() {\n        const contentObj = this.createContentObj();\n        const items = contentObj.map((data) => this.template.createInput(data));\n        this.contentHook.replaceChildren(...items);\n    }\n    \n    remove() {\n        this.element.remove();\n    }\n}\n;// CONCATENATED MODULE: ./src/modules/views/checklistView.js\nclass ChecklistView {\n    constructor(controller) {\n        this.controller = controller;\n        this.controller.setView(this);\n        this.element = undefined;\n    }\n\n    createContainer() {\n        const element = document.createElement('div');\n        element.classList.add('checklist');\n        return element;\n    }\n\n    createItemsHook() {\n        this.itemsHook = document.createElement('ul');\n        this.itemsHook.classList.add('checklist-itemList');\n        return this.itemsHook;\n    }\n\n    createAddItemButton() {\n        this.addItemButton = document.createElement('button');\n        this.addItemButton.classList.add('checklist-addButton');\n        this.addItemButton.setAttribute('type', 'button');\n        this.addItemButton.innerText = \"Add Item +\";\n        return this.addItemButton;\n    }\n\n    create() {\n        const element = this.createContainer();\n        element.append(\n            this.createItemsHook(),\n            this.createAddItemButton()\n        );\n        return element;\n    }\n\n    setInteractions() {\n        this.addItemButton.addEventListener('click', () => {this.controller.addEmptyItem()});\n    }\n\n    build() {\n        this.element = this.create();\n        this.controller.updateView();\n        this.setInteractions();\n        return this.element;\n    }\n\n    replaceItems(elements) {\n        this.itemsHook.replaceChildren(...elements);\n    }\n}\n;// CONCATENATED MODULE: ./src/modules/controllers/checklistController.js\nclass ChecklistController {\n    constructor(checklist, elementFactory, checklistItemFactory) {\n        this.checklist = checklist;\n        this.checklist.addObserver(this);\n        this.elementFactory = elementFactory;\n        this.checklistItemFactory = checklistItemFactory;\n        this.view = undefined;\n    }\n\n    setView(view) {\n        this.view = view;\n    }\n    \n    addEmptyItem() {\n        const item = this.checklistItemFactory('');\n        this.checklist.add(item);\n    }\n\n    updateView() {\n        const elements = this.checklist.items.map(\n            (item) => {\n                return this.elementFactory.buildChecklistItem(item);\n            }\n        )\n        this.view.replaceItems(elements);\n    }\n\n    update() {\n        this.updateView();\n    }\n}\n;// CONCATENATED MODULE: ./src/modules/views/checklistItemView.js\nclass ChecklistItemView {\n    constructor(controller) {\n        this.controller = controller;\n        this.controller.setView(this);\n        this.element = undefined;\n    }\n\n    createContainer() {\n        const element = document.createElement('li');\n        element.classList.add('checklistItem');\n        return element;\n    }\n\n    createDescriptionInput() {\n        this.descriptionInput = document.createElement('input');\n        this.descriptionInput.classList.add('checklistItem-descriptionInput');\n        this.descriptionInput.setAttribute('type', 'text');\n        return this.descriptionInput;\n    }\n\n    createDoneToggle() {\n        this.doneToggle = document.createElement('input');\n        this.doneToggle.classList.add('checklistItem-doneToggle');\n        this.doneToggle.setAttribute('type', 'checkbox');\n        return this.doneToggle;\n    }\n\n    createDeleteButton() {\n        this.deleteButton = document.createElement('button');\n        this.deleteButton.classList.add('checklistItem-deleteButton');\n        this.deleteButton.setAttribute('type', 'button');\n        this.deleteButton.innerText = 'X';\n        return this.deleteButton;\n    }\n\n    create() {\n        const element = this.createContainer();\n        element.append(\n            this.createDoneToggle(),\n            this.createDescriptionInput(),\n            this.createDeleteButton()\n        );\n        return element\n    }\n\n    setInteractions() {\n        this.descriptionInput.addEventListener('change', (e) => {this.controller.changeDescription(e.target.value)});\n        this.doneToggle.addEventListener('change', (e) => {this.controller.toggle()});\n        this.deleteButton.addEventListener('click', () => {this.controller.delete()});\n    }\n    \n    build() {\n        this.element = this.create();\n        this.controller.updateView();\n        this.setInteractions();\n        return this.element;\n    }\n\n    setDescription(text) {\n        this.descriptionInput.setAttribute('value', `${text}`);\n    }\n\n    setCheckboxState(isOn) {\n        if (isOn) {\n            this.doneToggle.setAttribute('checked', '');\n        } else {\n            this.doneToggle.removeAttribute('checked', '');\n        }\n    }\n}\n;// CONCATENATED MODULE: ./src/modules/controllers/checklistItemController.js\nclass ChecklistItemController {\n    constructor(item) {\n        this.item = item;\n        this.view = undefined;\n    }\n\n    setView(view) {\n        this.view = view;\n    }\n\n    toggle() {\n        this.item.toggleDone();\n    }\n\n    changeDescription(description) {\n        this.item.description = description;\n    }\n\n    updateView() {\n        this.view.setDescription(this.item.description);\n        this.view.setCheckboxState(this.item.isDone);\n    }\n\n    delete() {\n        this.item.unlink();\n    }\n}\n;// CONCATENATED MODULE: ./src/modules/templates/projectCollectionTemplate.js\nclass ProjectCollectionTemplate {\n    static createContainer() {\n        const element = document.createElement('div');\n        element.classList.add('projectCollection');\n        return element;\n    }\n\n    static createAddButton() {\n        const element = document.createElement('button');\n        element.setAttribute('type', 'button');\n        element.classList.add('projectCollection-addButton');\n        element.innerText = '+ Add Project';\n        return element;\n    }\n\n    static createContentHook() {\n        const element = document.createElement('div');\n        element.classList.add('projectCollection-contentHook');\n        return element;\n    }\n\n    static create() {\n        const element = ProjectCollectionTemplate.createContainer();\n        const addButton = ProjectCollectionTemplate.createAddButton();\n        const contentHook = ProjectCollectionTemplate.createContentHook();\n        \n        element.append(\n            addButton,\n            contentHook\n        );\n\n        return {\n            element,\n            addButton,\n            contentHook\n        };\n    }\n}\n;// CONCATENATED MODULE: ./src/modules/views/projectCollectionView.js\n\n\nclass ProjectCollectionView {\n    constructor(controller) {\n        this.controller = controller;\n        this.controller.setView(this);\n        this.template = ProjectCollectionTemplate;\n    }\n\n    create() {\n        const structure = this.template.create();\n        this.element = structure.element;\n        this.addButton = structure.addButton;\n        this.contentHook = structure.contentHook;\n    }\n\n    setInteractions() {\n        this.addButton.addEventListener('click', () => this.controller.createEmptyProject());\n    }\n\n    build() {\n        this.create();\n        this.controller.updateView();\n        this.setInteractions();\n        return this.element;\n    }\n\n    replaceItems(elements) {\n        this.contentHook.replaceChildren(...elements);\n    }\n}\n;// CONCATENATED MODULE: ./src/modules/controllers/projectCollectionController.js\nclass ProjectCollectionController {\n    constructor(projectCollection, contentHook, elementFactory, projectFactory) {\n        this.projectCollection = projectCollection;\n        this.projectCollection.addObserver(this);\n        this.contentHook = contentHook;\n        this.elementFactory = elementFactory;\n        this.projectFactory = projectFactory;\n\n        this.view = undefined;\n    }\n\n    setView(view) {\n        this.view = view;\n    }\n\n    updateView() {\n        const elements = this.projectCollection.items.map(\n            (item) => {\n                return this.elementFactory.buildCollectionButton(item, this.contentHook);\n            }\n        )\n        this.view.replaceItems(elements);\n    }\n\n    update() {\n        this.updateView();\n    }\n\n    createEmptyProject() {\n        const project = this.projectFactory('');\n        this.projectCollection.add(project);\n    }\n}\n;// CONCATENATED MODULE: ./src/modules/templates/collectionButtonTemplate.js\nclass CollectionButtonTemplate {\n    static createContainer() {\n        const element = document.createElement('div');\n        element.classList.add('collectionButton');\n        return element;\n    }\n    \n    static createButton() {\n        const element = document.createElement('button');\n        element.setAttribute('type', 'button');\n        element.classList.add('collectionButton-button');\n        return element;\n    }\n    \n    static createDeleteButton() {\n        const element = document.createElement('button');\n        element.setAttribute('type', 'button');\n        element.classList.add('collectionButton-deleteButton');\n        element.innerText = 'X';\n        return element;\n    }\n\n    static create() {\n        const element = CollectionButtonTemplate.createContainer();\n        const button = CollectionButtonTemplate.createButton()\n        const deleteButton = CollectionButtonTemplate.createDeleteButton();\n        element.append(\n            button,\n            deleteButton\n        );\n        return {\n            element,\n            button,\n            deleteButton\n        };\n    }\n}\n\n\n;// CONCATENATED MODULE: ./src/modules/views/collectionButtonView.js\n\n\nclass CollectionButtonView {\n    constructor(controller) {\n        this.controller = controller;\n        this.controller.setView(this);\n        this.template = CollectionButtonTemplate;\n    }\n\n    create() {\n        const structure = CollectionButtonTemplate.create();\n        this.element = structure.element;\n        this.button = structure.button;\n        this.deleteButton = structure.deleteButton;\n    }\n\n    setInteractions() {\n        this.button.addEventListener('click', () => {this.controller.display()});\n        this.deleteButton.addEventListener('click', () => {this.controller.delete()});\n    }\n\n    build() {\n        this.create();\n        this.controller.updateView();\n        this.setInteractions();\n        return this.element;\n    }\n\n    remove() {\n        this.element.remove();\n    }\n\n    changeName(name) {\n        this.button.innerText = name;\n    }\n}\n;// CONCATENATED MODULE: ./src/modules/controllers/collectionButtonController.js\nclass CollectionButtonController {\n    constructor(project, contentHook, buildProject) {\n        this.project = project;\n        this.project.addObserver(this);\n        this.contentHook = contentHook;\n        this.buildProject = buildProject;\n\n        this.displayedElement = undefined;\n\n        this.view = undefined;\n    }\n\n    setView(view) {\n        this.view = view;\n    }\n\n    updateView() {\n        this.view.changeName(this.project.name);\n    }\n\n    update() {\n        this.updateView();\n    }\n\n    finalize() {\n        this.project.removeObserver(this);\n    }\n\n    remove() {\n        this.view.remove();\n        if (this.displayedElement) {\n            const element = this.displayedElement.deref();\n            if (element) {\n                element.remove();\n            }\n        }\n    }\n\n    delete() {\n        this.project.unlink();\n        this.finalize();\n        this.remove();\n    }\n\n    display() {\n        this.displayedElement = new WeakRef(this.buildProject(this.project));\n        this.contentHook.replaceChildren(this.displayedElement.deref());\n    }\n}\n;// CONCATENATED MODULE: ./src/modules/views/todoView.js\n\n\n\nclass TodoView {\n    constructor(controller, projectCollectionElement) {\n        this.controller = controller;\n        this.controller.setView(this);\n        this.projectCollectionElement = projectCollectionElement;\n    }\n\n    createContainer() {\n        const element = document.createElement('div');\n        element.classList.add('todoCollection');\n        return element;\n    }\n\n    createButton(name) {\n        const obj = CollectionButtonTemplate.create();\n        obj.button.innerText = name;\n        obj.deleteButton.remove();\n        return obj.element\n    }\n\n    createDefaultButtons() {\n        this.inboxButton = this.createButton('Inbox');\n        this.todayButton = this.createButton('Today');\n        this.thisWeekButton = this.createButton('This Week');\n        return [this.inboxButton, this.todayButton, this.thisWeekButton];\n    }\n\n    createDefaultCollection() {\n        const obj = ProjectCollectionTemplate.create();\n        this.defaultCollection = obj.element;\n        this.contentHook = obj.contentHook;\n        obj.addButton.remove();\n        return this.defaultCollection;\n    }\n\n    create() {\n        const element = this.createContainer();\n        const defaultCollection = this.createDefaultCollection();\n        this.contentHook.append(...this.createDefaultButtons())\n        element.append(\n            defaultCollection,\n            this.projectCollectionElement\n        );\n        return element;\n    }\n\n    setInteractions() {\n        this.inboxButton.addEventListener('click', () => {this.controller.displayInbox()});\n        this.todayButton.addEventListener('click', () => {this.controller.displayDueToday()});\n        this.thisWeekButton.addEventListener('click', () => {this.controller.displayDueThisWeek()});\n    }\n\n    build() {\n        this.element = this.create();\n        this.setInteractions();\n        return this.element;\n    }\n\n    replaceItems(elements) {\n        this.contentHook.replaceChildren(...elements);\n    }\n}\n\n;// CONCATENATED MODULE: ./src/modules/controllers/todoController.js\n\n\nclass TodoController {\n    constructor(todo, contentHook, elementFactory) {\n        this.todo = todo;\n        this.contentHook = contentHook;\n        this.elementFactory = elementFactory;\n\n        this.view = undefined;\n    }\n\n    setView(view) {\n        this.view = view;\n    }\n\n    displayInbox() {\n        this.contentHook.replaceChildren(this.elementFactory.buildNoEditProject(this.todo.inbox));\n    }\n\n    createStaticProjectElement(name, taskList) {\n        const structure = ProjectTemplate.create();\n\n        structure.nameInput.setAttribute('readonly', '');\n        structure.nameInput.setAttribute('value', name)\n        structure.addTaskButton.remove();\n        structure.deleteButton.remove();\n\n        structure.tasksHook.replaceChildren(...taskList);\n\n        return structure.element;\n    }\n\n    displayDueToday() {\n        const dueToday = this.todo.getTasksDueToday();\n        const taskElements = dueToday.map((task) => {return this.elementFactory.buildTask(task)});\n        const element = this.createStaticProjectElement('Today', taskElements);\n        this.contentHook.replaceChildren(element);\n    }\n\n    displayDueThisWeek() {\n        const dueThisWeek = this.todo.getTasksDueThisWeek();\n        const taskElements = dueThisWeek.map((task) => {return this.elementFactory.buildTask(task)});\n        const element = this.createStaticProjectElement('This Week', taskElements);\n        this.contentHook.replaceChildren(element);\n    }\n}\n;// CONCATENATED MODULE: ./src/modules/views/noEditProjectView.js\n\n\nclass NoEditProjectView {\n    constructor(controller) {\n        this.controller = controller;\n        this.controller.setView(this);\n        this.element = undefined;\n        \n        this.template = ProjectTemplate;\n    }\n\n    create() {\n        const structure = ProjectTemplate.create();\n        this.element = structure.element;\n        this.nameInput = structure.nameInput;\n\n        this.nameInput.setAttribute('readonly', '');\n        structure.deleteButton.remove();\n\n        this.tasksHook = structure.tasksHook;\n        this.addTaskButton = structure.addTaskButton;\n    }\n\n    setInteractions() {\n        this.addTaskButton.addEventListener('click', () => {this.controller.addTaskInput()});\n    }\n\n    build() {\n        this.create();\n        this.controller.updateView();\n        this.setInteractions();\n        return this.element;\n    }\n\n    replaceItems(elements) {\n        this.tasksHook.replaceChildren(...elements);\n    }\n\n    addItem(element) {\n        this.tasksHook.append(element);\n    }\n\n    setName(name) {\n        this.nameInput.setAttribute('value', name);\n    }\n}\n;// CONCATENATED MODULE: ./src/modules/factories/elementFactory.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclass ElementFactory {\n    constructor(modelFactory, popUpLayer) {\n        this.modelFactory = modelFactory;\n        this.popUpLayer = popUpLayer;\n    }\n\n    buildChecklist(checklist) {\n        const view = new ChecklistView(\n            new ChecklistController(\n                checklist,\n                this,\n                (...args) => {return this.modelFactory.createChecklistItem(...args);}\n            )\n        )\n\n        const element = view.build();\n\n        return element;\n    }\n\n    buildTask(task) {\n        const checklistElement = this.buildChecklist(task.checklist)\n        const view = new TaskView(new TaskController(task, this, this.popUpLayer), checklistElement);\n        const element = view.build();\n        return element;\n    }\n\n    buildProject(project) {\n        const projectView = new ProjectView(new ProjectController(project, this, this.popUpLayer));\n        const element = projectView.build();\n        return element;\n    }\n\n    buildNoEditProject(project) {\n        const projectView = new NoEditProjectView(new ProjectController(project, this, this.popUpLayer));\n        const element = projectView.build();\n        return element;\n    }\n    \n    buildTaskInput(project) {\n        const view = new TaskInputView(new TaskInputController(project, (...args) => {return this.modelFactory.createTask(...args);}));\n        const element = view.build();\n        return element;\n    }\n\n    buildChecklistItem(item) {\n        const view = new ChecklistItemView(new ChecklistItemController(item));\n        const element = view.build();\n        return element;\n    }\n\n    buildProjectCollection(projectCollection, contentHook) {\n        const view = new ProjectCollectionView(new ProjectCollectionController(\n            projectCollection,\n            contentHook,\n            this,\n            (...args) => {return this.modelFactory.createProject(...args);}\n        ));\n        const element = view.build();\n        return element;\n    }\n\n    buildCollectionButton(project, contentHook) {\n        const view = new CollectionButtonView(new CollectionButtonController(\n            project,\n            contentHook,\n            (project) => {return this.buildProject(project)}\n        ));\n        const element = view.build();\n        return element;\n    }\n\n    buildTodo(todo, contentHook) {\n        const projectCollectionElement = this.buildProjectCollection(todo.projectCollection, contentHook);\n        const view = new TodoView(new TodoController(\n            todo,\n            contentHook,\n            this\n        ),\n        projectCollectionElement\n        );\n        return view.build();\n    }\n}\n;// CONCATENATED MODULE: ./src/modules/utils/eventManager.js\nclass EventManager {\n    constructor() {\n        this.observers = [];\n    }\n\n    addObserver(observer) {\n        this.observers.push(new WeakRef(observer));\n    }\n\n    removeObserver(observer) {\n        const index = this.observers.findIndex((ref) => ref.deref() === observer);\n        this.observers.splice(index, 1);\n    }\n\n    updateObservers() {\n        this.observers.forEach((ref, index) => {\n            const observer = ref.deref();\n            if (observer) {\n                observer.update();\n            } else {\n                this.observers.splice(index, 1);\n            }\n        }\n        );\n    }\n}\n;// CONCATENATED MODULE: ./src/modules/models/task.js\n\n\n\nclass Task {\n    constructor(title, description, dueDate, priority = utils_priority.UNSET, checklist) {\n        this.title = title;\n        this.description = description;\n        this.dueDate = dueDate;\n        this.priority = priority;\n        this.checklist = checklist;\n        this.isDone = false;\n\n        this.project = undefined;\n        this.eventManager = new EventManager();\n    }\n\n    getData() {\n        return {\n            title: this.title,\n            description: this.description,\n            dueDate: this.dueDate,\n            priority: this.priority,\n            isDone: this.isDone,\n            checklist: this.checklist.getData()\n        };\n    }\n\n    unlink() {\n        if (this.project) {\n            this.project.remove(this);\n        }\n    }\n\n    link(project) {\n        this.unlink();\n        this.project = project;\n    }\n\n    setDone() {\n        this.isDone = true;\n        this.checklist.setDone();\n    }\n\n    setUndone() {\n        this.isDone = false;\n        this.checklist.setUndone();\n    }\n\n    toggleDone() {\n        if (this.isDone) {\n            this.setUndone();\n        } else {\n            this.setDone();\n        }\n    }\n\n    addObserver(observer) {\n        this.eventManager.addObserver(observer);\n    }\n\n    removeObserver(observer) {\n        this.eventManager.removeObserver(observer);\n    }\n\n    updateObservers() {\n        this.eventManager.updateObservers();\n    }\n\n    setState(object) {\n        Object.entries(object).forEach(\n            ([key, value] = entry) => {\n                this[key] = value;\n            }\n        );\n        this.updateObservers();\n    }\n}\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/typeof.js\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\n;// CONCATENATED MODULE: ./node_modules/date-fns/esm/_lib/requiredArgs/index.js\nfunction requiredArgs(required, args) {\n  if (args.length < required) {\n    throw new TypeError(required + ' argument' + (required > 1 ? 's' : '') + ' required, but only ' + args.length + ' present');\n  }\n}\n;// CONCATENATED MODULE: ./node_modules/date-fns/esm/isDate/index.js\n\n\n/**\n * @name isDate\n * @category Common Helpers\n * @summary Is the given value a date?\n *\n * @description\n * Returns true if the given value is an instance of Date. The function works for dates transferred across iframes.\n *\n * @param {*} value - the value to check\n * @returns {boolean} true if the given value is a date\n * @throws {TypeError} 1 arguments required\n *\n * @example\n * // For a valid date:\n * const result = isDate(new Date())\n * //=> true\n *\n * @example\n * // For an invalid date:\n * const result = isDate(new Date(NaN))\n * //=> true\n *\n * @example\n * // For some value:\n * const result = isDate('2014-02-31')\n * //=> false\n *\n * @example\n * // For an object:\n * const result = isDate({})\n * //=> false\n */\nfunction isDate(value) {\n  requiredArgs(1, arguments);\n  return value instanceof Date || _typeof(value) === 'object' && Object.prototype.toString.call(value) === '[object Date]';\n}\n;// CONCATENATED MODULE: ./node_modules/date-fns/esm/toDate/index.js\n\n\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @param {Date|Number} argument - the value to convert\n * @returns {Date} the parsed date in the local time zone\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Clone the date:\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * const result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */\nfunction toDate(argument) {\n  requiredArgs(1, arguments);\n  var argStr = Object.prototype.toString.call(argument);\n\n  // Clone the date\n  if (argument instanceof Date || _typeof(argument) === 'object' && argStr === '[object Date]') {\n    // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n    return new Date(argument.getTime());\n  } else if (typeof argument === 'number' || argStr === '[object Number]') {\n    return new Date(argument);\n  } else {\n    if ((typeof argument === 'string' || argStr === '[object String]') && typeof console !== 'undefined') {\n      // eslint-disable-next-line no-console\n      console.warn(\"Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments\");\n      // eslint-disable-next-line no-console\n      console.warn(new Error().stack);\n    }\n    return new Date(NaN);\n  }\n}\n;// CONCATENATED MODULE: ./node_modules/date-fns/esm/isValid/index.js\n\n\n\n/**\n * @name isValid\n * @category Common Helpers\n * @summary Is the given date valid?\n *\n * @description\n * Returns false if argument is Invalid Date and true otherwise.\n * Argument is converted to Date using `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}\n * Invalid Date is a Date, whose time value is NaN.\n *\n * Time value of Date: http://es5.github.io/#x15.9.1.1\n *\n * @param {*} date - the date to check\n * @returns {Boolean} the date is valid\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // For the valid date:\n * const result = isValid(new Date(2014, 1, 31))\n * //=> true\n *\n * @example\n * // For the value, convertable into a date:\n * const result = isValid(1393804800000)\n * //=> true\n *\n * @example\n * // For the invalid date:\n * const result = isValid(new Date(''))\n * //=> false\n */\nfunction isValid(dirtyDate) {\n  requiredArgs(1, arguments);\n  if (!isDate(dirtyDate) && typeof dirtyDate !== 'number') {\n    return false;\n  }\n  var date = toDate(dirtyDate);\n  return !isNaN(Number(date));\n}\n;// CONCATENATED MODULE: ./node_modules/date-fns/esm/startOfDay/index.js\n\n\n/**\n * @name startOfDay\n * @category Day Helpers\n * @summary Return the start of a day for the given date.\n *\n * @description\n * Return the start of a day for the given date.\n * The result will be in the local timezone.\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of a day\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of a day for 2 September 2014 11:55:00:\n * const result = startOfDay(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 02 2014 00:00:00\n */\nfunction startOfDay(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}\n;// CONCATENATED MODULE: ./node_modules/date-fns/esm/isSameDay/index.js\n\n\n/**\n * @name isSameDay\n * @category Day Helpers\n * @summary Are the given dates in the same day (and year and month)?\n *\n * @description\n * Are the given dates in the same day (and year and month)?\n *\n * @param {Date|Number} dateLeft - the first date to check\n * @param {Date|Number} dateRight - the second date to check\n * @returns {Boolean} the dates are in the same day (and year and month)\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Are 4 September 06:00:00 and 4 September 18:00:00 in the same day?\n * const result = isSameDay(new Date(2014, 8, 4, 6, 0), new Date(2014, 8, 4, 18, 0))\n * //=> true\n *\n * @example\n * // Are 4 September and 4 October in the same day?\n * const result = isSameDay(new Date(2014, 8, 4), new Date(2014, 9, 4))\n * //=> false\n *\n * @example\n * // Are 4 September, 2014 and 4 September, 2015 in the same day?\n * const result = isSameDay(new Date(2014, 8, 4), new Date(2015, 8, 4))\n * //=> false\n */\nfunction isSameDay(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeftStartOfDay = startOfDay(dirtyDateLeft);\n  var dateRightStartOfDay = startOfDay(dirtyDateRight);\n  return dateLeftStartOfDay.getTime() === dateRightStartOfDay.getTime();\n}\n;// CONCATENATED MODULE: ./node_modules/date-fns/esm/isToday/index.js\n\n\n/**\n * @name isToday\n * @category Day Helpers\n * @summary Is the given date today?\n * @pure false\n *\n * @description\n * Is the given date today?\n *\n * > ⚠️ Please note that this function is not present in the FP submodule as\n * > it uses `Date.now()` internally hence impure and can't be safely curried.\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is today\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // If today is 6 October 2014, is 6 October 14:00:00 today?\n * const result = isToday(new Date(2014, 9, 6, 14, 0))\n * //=> true\n */\nfunction isToday(dirtyDate) {\n  requiredArgs(1, arguments);\n  return isSameDay(dirtyDate, Date.now());\n}\n;// CONCATENATED MODULE: ./node_modules/date-fns/esm/getDay/index.js\n\n\n/**\n * @name getDay\n * @category Weekday Helpers\n * @summary Get the day of the week of the given date.\n *\n * @description\n * Get the day of the week of the given date.\n *\n * @param {Date|Number} date - the given date\n * @returns {0|1|2|3|4|5|6} the day of week, 0 represents Sunday\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Which day of the week is 29 February 2012?\n * const result = getDay(new Date(2012, 1, 29))\n * //=> 3\n */\nfunction getDay(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var day = date.getDay();\n  return day;\n}\n;// CONCATENATED MODULE: ./node_modules/date-fns/esm/_lib/toInteger/index.js\nfunction toInteger(dirtyNumber) {\n  if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {\n    return NaN;\n  }\n  var number = Number(dirtyNumber);\n  if (isNaN(number)) {\n    return number;\n  }\n  return number < 0 ? Math.ceil(number) : Math.floor(number);\n}\n;// CONCATENATED MODULE: ./node_modules/date-fns/esm/_lib/defaultOptions/index.js\nvar defaultOptions = {};\nfunction getDefaultOptions() {\n  return defaultOptions;\n}\nfunction setDefaultOptions(newOptions) {\n  defaultOptions = newOptions;\n}\n;// CONCATENATED MODULE: ./node_modules/date-fns/esm/startOfWeek/index.js\n\n\n\n\n/**\n * @name startOfWeek\n * @category Week Helpers\n * @summary Return the start of a week for the given date.\n *\n * @description\n * Return the start of a week for the given date.\n * The result will be in the local timezone.\n *\n * @param {Date|Number} date - the original date\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @returns {Date} the start of a week\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n *\n * @example\n * // The start of a week for 2 September 2014 11:55:00:\n * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Sun Aug 31 2014 00:00:00\n *\n * @example\n * // If the week starts on Monday, the start of the week for 2 September 2014 11:55:00:\n * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })\n * //=> Mon Sep 01 2014 00:00:00\n */\nfunction startOfWeek(dirtyDate, options) {\n  var _ref, _ref2, _ref3, _options$weekStartsOn, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;\n  requiredArgs(1, arguments);\n  var defaultOptions = getDefaultOptions();\n  var weekStartsOn = toInteger((_ref = (_ref2 = (_ref3 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.weekStartsOn) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions.weekStartsOn) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.weekStartsOn) !== null && _ref !== void 0 ? _ref : 0);\n\n  // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n  var date = toDate(dirtyDate);\n  var day = date.getDay();\n  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;\n  date.setDate(date.getDate() - diff);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}\n;// CONCATENATED MODULE: ./node_modules/date-fns/esm/isSameWeek/index.js\n\n\n/**\n * @name isSameWeek\n * @category Week Helpers\n * @summary Are the given dates in the same week (and month and year)?\n *\n * @description\n * Are the given dates in the same week (and month and year)?\n *\n * @param {Date|Number} dateLeft - the first date to check\n * @param {Date|Number} dateRight - the second date to check\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @returns {Boolean} the dates are in the same week (and month and year)\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n *\n * @example\n * // Are 31 August 2014 and 4 September 2014 in the same week?\n * const result = isSameWeek(new Date(2014, 7, 31), new Date(2014, 8, 4))\n * //=> true\n *\n * @example\n * // If week starts with Monday,\n * // are 31 August 2014 and 4 September 2014 in the same week?\n * const result = isSameWeek(new Date(2014, 7, 31), new Date(2014, 8, 4), {\n *   weekStartsOn: 1\n * })\n * //=> false\n *\n * @example\n * // Are 1 January 2014 and 1 January 2015 in the same week?\n * const result = isSameWeek(new Date(2014, 0, 1), new Date(2015, 0, 1))\n * //=> false\n */\nfunction isSameWeek(dirtyDateLeft, dirtyDateRight, options) {\n  requiredArgs(2, arguments);\n  var dateLeftStartOfWeek = startOfWeek(dirtyDateLeft, options);\n  var dateRightStartOfWeek = startOfWeek(dirtyDateRight, options);\n  return dateLeftStartOfWeek.getTime() === dateRightStartOfWeek.getTime();\n}\n;// CONCATENATED MODULE: ./node_modules/date-fns/esm/isThisWeek/index.js\n\n\n/**\n * @name isThisWeek\n * @category Week Helpers\n * @summary Is the given date in the same week as the current date?\n * @pure false\n *\n * @description\n * Is the given date in the same week as the current date?\n *\n * > ⚠️ Please note that this function is not present in the FP submodule as\n * > it uses `Date.now()` internally hence impure and can't be safely curried.\n *\n * @param {Date|Number} date - the date to check\n * @param {Object} [options] - the object with options\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @returns {Boolean} the date is in this week\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n *\n * @example\n * // If today is 25 September 2014, is 21 September 2014 in this week?\n * const result = isThisWeek(new Date(2014, 8, 21))\n * //=> true\n *\n * @example\n * // If today is 25 September 2014 and week starts with Monday\n * // is 21 September 2014 in this week?\n * const result = isThisWeek(new Date(2014, 8, 21), { weekStartsOn: 1 })\n * //=> false\n */\n\nfunction isThisWeek(dirtyDate, options) {\n  requiredArgs(1, arguments);\n  return isSameWeek(dirtyDate, Date.now(), options);\n}\n;// CONCATENATED MODULE: ./src/modules/utils/collectionWrapper.js\nclass CollectionWrapper {\n    constructor(items = []) {\n        this.items = items;\n    }\n\n    add(item) {\n        this.items.push(item);\n    }\n\n    remove(item) {\n        const position = this.items.findIndex((value) => value === item);\n        this.items.splice(position, 1);\n    }\n\n    insert(item, position) {\n        this.items.splice(position, 0, item);\n    }\n\n    replace(item, position) {\n        this.items.splice(position, 1, item);\n    }\n\n    get(position) {\n        return this.items[position]; \n    }\n\n    clean() {\n        this.items = [];\n    }\n}\n;// CONCATENATED MODULE: ./src/modules/models/project.js\n\n\n\n\nclass Project {\n    constructor(name, items) {\n        this.name = name;\n        this.collection = new CollectionWrapper(items);\n        this.items.forEach((item) => item.link(this));\n        this.eventManager = new EventManager();\n        this.projectCollection = undefined;\n    }\n\n    get items() {\n        return this.collection.items;\n    }\n\n    getData() {\n        return {\n            name: this.name,\n            items: this.items.map((item) => item.getData())\n        };\n    }\n\n    add(item) {\n        this.collection.add(item);\n        item.link(this);\n        this.updateObservers();\n    }\n\n    remove(item) {\n        this.collection.remove(item);\n        this.updateObservers();\n    }\n\n    unlink() {\n        if (this.projectCollection) {\n            this.projectCollection.remove(this);\n        }\n    }\n\n    link(projectCollection) {\n        this.unlink();\n        this.projectCollection = projectCollection;\n    }\n\n    getDueToday() {\n        const due = this.items.filter((item) => {\n            const dateObj = new Date(item.dueDate.replace('-', '/'));\n            return isValid(dateObj) && isToday(dateObj);\n        }\n        );\n        return due;\n    }\n\n    getDueThisWeek() {\n        const todayWeekDay = getDay(new Date());\n        const due = this.items.filter((item) => {\n            const dateObj = new Date(item.dueDate.replace('-', '/'));\n            return isValid(dateObj) && isThisWeek(dateObj, {weekStartsOn: todayWeekDay})   \n        }\n        );\n        return due;\n    }\n\n    addObserver(observer) {\n        this.eventManager.addObserver(observer);\n    }\n\n    removeObserver(observer) {\n        this.eventManager.removeObserver(observer);\n    }\n\n    updateObservers() {\n        this.eventManager.updateObservers();\n    }\n\n    setState(object) {\n        Object.entries(object).forEach(\n            ([key, value] = entry) => {\n                this[key] = value;\n            }\n        );\n        this.updateObservers();\n    }\n}\n;// CONCATENATED MODULE: ./src/modules/models/checklistItem.js\nclass ChecklistItem {\n    constructor(description) {\n        this.description = description;\n        this.isDone = false;\n        \n        this.checklist = undefined;\n    }\n\n    getData() {\n        return {\n            description: this.description,\n            isDone: this.isDone\n        };\n    }\n\n    unlink() {\n        if (this.checklist === undefined) {return;}\n        this.checklist.remove(this);\n    }\n\n    link(checklist) {\n        this.unlink();\n        this.checklist = checklist;\n    }\n\n    setDone() {\n        this.isDone = true;\n    }\n\n    setUndone() {\n        this.isDone = false;\n    }\n\n    toggleDone() {\n        if (this.isDone) {\n            this.setUndone();\n        } else {\n            this.setDone();\n        }\n    }\n}\n;// CONCATENATED MODULE: ./src/modules/models/checklist.js\n\n\n\nclass Checklist {\n    constructor(items) {\n        this.collection = new CollectionWrapper(items);\n        this.items.forEach((item) => item.link(this));\n        this.eventManager = new EventManager();\n    }\n\n    get items() {\n        return this.collection.items;\n    }\n\n    getData() {\n        return {items: this.items.map((item) => item.getData())}\n    }\n\n    add(item) {\n        this.collection.add(item);\n        item.link(this);\n        this.updateObservers();\n    }\n\n    remove(item) {\n        this.collection.remove(item);\n        this.updateObservers();\n    }\n\n    setDone() {\n        this.items.forEach((item) => item.setDone());\n    }\n\n    setUndone() {\n        this.items.forEach((item) => item.setUndone());\n    }\n\n    toggleDone() {\n        this.items.forEach((item) => item.toggleDone());\n    }\n\n    addObserver(observer) {\n        this.eventManager.addObserver(observer);\n    }\n\n    removeObserver(observer) {\n        this.eventManager.removeObserver(observer);\n    }\n\n    updateObservers() {\n        this.eventManager.updateObservers();\n    }\n}\n;// CONCATENATED MODULE: ./src/modules/models/projectCollection.js\n\n\n\nclass ProjectCollection {\n    constructor(items) {\n        this.collection = new CollectionWrapper(items);\n        this.items.forEach((item) => item.link(this));\n        this.eventManager = new EventManager();\n    }\n\n    get items() {\n        return this.collection.items;\n    }\n\n    getData() {\n        return {\n            items: this.items.map((item) => item.getData())\n        };\n    }\n\n    add(item) {\n        this.collection.add(item);\n        item.link(this);\n        this.updateObservers();\n    }\n\n    remove(item) {\n        this.collection.remove(item);\n        this.updateObservers();\n    }\n\n    getTasksDueToday() {\n        const tasks = this.items.reduce((total, item) => {\n            const due = item.getDueToday();\n            if (due) {\n                total.push(...due);\n            }\n            return total;\n        }, []);\n        return tasks;\n    }\n\n    getTasksDueThisWeek() {\n        const tasks = this.items.reduce((total, item) => {\n            const due = item.getDueThisWeek();\n            if (due) {\n                total.push(...due);\n            }\n            return total;\n        }, []);\n        return tasks;\n    }\n\n    addObserver(observer) {\n        this.eventManager.addObserver(observer);\n    }\n\n    removeObserver(observer) {\n        this.eventManager.removeObserver(observer);\n    }\n\n    updateObservers() {\n        this.eventManager.updateObservers();\n    }\n}\n;// CONCATENATED MODULE: ./src/modules/models/todoList.js\nclass TodoList {\n    constructor(project, projectCollection) {\n        this.inbox = project;\n        this.projectCollection = projectCollection;\n    }\n\n    getData() {\n        return {\n            inbox: this.inbox.getData(),\n            projectCollection: this.projectCollection.getData()\n        };\n    }\n\n    getTasksDueToday() {\n        const due = [];\n        due.push(...this.inbox.getDueToday(), ...this.projectCollection.getTasksDueToday());\n        return due;\n    }\n\n    getTasksDueThisWeek() {\n        const due = [];\n        due.push(...this.inbox.getDueThisWeek(), ...this.projectCollection.getTasksDueThisWeek());\n        return due;\n    }\n}\n;// CONCATENATED MODULE: ./src/modules/factories/modelFactory.js\n\n\n\n\n\n\n\nclass ModelFactory {\n    createChecklist(items) {\n        const checklist = new Checklist(items);\n        return checklist;\n    }\n\n    createChecklistItem(description) {\n        const item = new ChecklistItem(description);\n        return item;\n    }\n\n    createTask(title, description, dueDate, priority, checklist) {\n        if (!checklist) {\n            checklist = this.createChecklist();\n        }\n        const task = new Task(title, description, dueDate, priority, checklist);\n        return task;\n    }\n\n    createProject(name, items) {\n        const project = new Project(name, items);\n        return project;\n    }\n\n    createProjectCollection(items) {\n        const projectCollection = new ProjectCollection(items);\n        return projectCollection;\n    }\n\n    createTodo(project, projectCollection) {\n        const todo = new TodoList(project, projectCollection);\n        return todo;\n    }\n}\n;// CONCATENATED MODULE: ./src/modules/factories/proxyFactory.js\nclass ProxyFactory {\n    constructor(modelFactory, proxyWrapper) {\n        this.modelFactory = modelFactory;\n        this.proxyWrapper = proxyWrapper;\n    }\n\n    createChecklist(items = []) {\n        const model = this.modelFactory.createChecklist(this.proxyWrapper(items));\n        return this.proxyWrapper(model);\n    }\n\n    createChecklistItem(description) {\n        const model = this.modelFactory.createChecklistItem(description);\n        return this.proxyWrapper(model);\n    }\n\n    createTask(title, description, dueDate, priority, checklist) {\n        if (!checklist) {\n            checklist = this.createChecklist();\n        }\n        const model = this.modelFactory.createTask(title, description, dueDate, priority, checklist);\n        return this.proxyWrapper(model);\n    }\n\n    createProject(name, items = []) {\n        const model = this.modelFactory.createProject(name, this.proxyWrapper(items));\n        return this.proxyWrapper(model);\n    }\n\n    createProjectCollection(items = []) {\n        const model = this.modelFactory.createProjectCollection(this.proxyWrapper(items));\n        return this.proxyWrapper(model);\n    }\n\n    createTodo(project, projectCollection) {\n        const model = this.modelFactory.createTodo(project, projectCollection);\n        return this.proxyWrapper(model);\n    }\n}\n;// CONCATENATED MODULE: ./src/modules/utils/storage.js\nclass StorageWrapper {\n    constructor(storageMechanism) {\n        this.storageMechanism = storageMechanism;\n    }\n\n    saveTodo(todo) {\n        this.storageMechanism.setItem('todo', JSON.stringify(todo.getData()));\n    }\n\n    getTodo() {\n        return JSON.parse(this.storageMechanism.getItem('todo'));\n    }\n}\n;// CONCATENATED MODULE: ./src/modules/utils/changeListenerProxy.js\nclass ChangeListenerProxy {\n    constructor(callback = (() => {return;})) {\n        this.callback = callback;\n    }\n\n    setCallback(callback) {\n        this.callback = callback;\n    }\n\n    wrapObject(obj) {\n        // This additional line makes sure that when the callback is called the callback will be the one\n        // stored currently in this.callback\n        const callback = () => {this.callback()};\n        return new Proxy(obj, {\n            set(target, property, value) {\n                target[property] = value;\n                callback();\n                return true;\n            }\n        });\n    }\n}\n;// CONCATENATED MODULE: ./src/modules/factories/loadFactory.js\nclass LoadFactory {\n    constructor(modelFactory) {\n        this.modelFactory = modelFactory;\n    }\n\n    loadChecklistItem(data) {\n        const item = this.modelFactory.createChecklistItem(data.description);\n        if (data.isDone) {item.setDone()}\n        return item;\n    }\n\n    loadChecklist(data) {\n        const items = data.items.map((dataItem) => this.loadChecklistItem(dataItem));\n        const checklist = this.modelFactory.createChecklist(items);\n        return checklist;\n    }\n\n    loadTask(data) {\n        const checklist = this.loadChecklist(data.checklist);\n        const task = this.modelFactory.createTask(data.title, data.description, data.dueDate, data.priority, checklist);\n        if (data.isDone) {task.setDone()}\n        return task;\n    }\n\n    loadProject(data) {\n        const items = data.items.map((dataItem) => this.loadTask(dataItem));\n        const project = this.modelFactory.createProject(data.name, items);\n        return project;\n    }\n\n    loadProjectCollection(data) {\n        const items = data.items.map((dataItem) => this.loadProject(dataItem));\n        const projectCollection = this.modelFactory.createProjectCollection(items);\n        return projectCollection;\n    }\n\n    loadTodo(data) {\n        const projectCollection = this.loadProjectCollection(data.projectCollection);\n        const inbox = this.loadProject(data.inbox);\n        const todo = this.modelFactory.createTodo(inbox, projectCollection);\n        return todo;\n    }\n}\n;// CONCATENATED MODULE: ./src/modules/popUp/popUpPositions.js\nconst Positions = Object.freeze({\n    TOP_LEFT: \"popUp--topLeft\",\n    TOP_MID: \"popUp--topMid\",\n    TOP_RIGHT: \"popUp--topRight\",\n    CENTER_LEFT: \"popUp--centerLeft\",\n    CENTER: \"popUp--center\",\n    CENTER_RIGHT: \"popUp--centerRight\",\n    BOTTOM_LEFT: \"popUp--bottomLeft\",\n    BOTTOM_MID: \"popUp--bottomMid\",\n    BOTTOM_RIGHT: \"popUp--bottomRight\"\n});\n\n/* harmony default export */ const popUpPositions = (Positions);\n;// CONCATENATED MODULE: ./src/modules/popUp/popUp.js\n\n\nfunction createPopUp(element, clickLock = false, backgroundColor = \"#ffffff00\", position = popUpPositions.CENTER) {\n    const popUp = document.createElement('div');\n    popUp.classList.add('popUp');\n    popUp.classList.add(position);\n    popUp.style.backgroundColor = backgroundColor;\n    \n    const popUpWrapper = document.createElement('div');\n    popUpWrapper.classList.add('popUp-wrapper');\n\n    popUpWrapper.append(element);\n    popUp.append(popUpWrapper);\n    \n    if (clickLock) {\n        popUp.classList.add('popUp--clickLocked');\n    }\n\n    const observer = new MutationObserver((mutationList, observer) => {\n        popUp.remove();\n        observer.disconnect();\n    })\n\n    observer.observe(popUpWrapper, { childList: true });\n\n    return popUp;\n}\n;// CONCATENATED MODULE: ./src/modules/popUp/popUpLayer.js\n\n\nclass PopupLayer {\n    constructor(contentHook) {\n        this.contentHook = contentHook;\n        this.contentHook.classList.add('popUpLayer');\n    }\n\n    addPopUp(element, clickLock, backgroundColor, position) {\n        const popUp = createPopUp(element, clickLock, backgroundColor, position)\n        this.contentHook.append(popUp);\n    }\n}\n;// CONCATENATED MODULE: ./src/modules/customElements/scrollContainer.js\nclass ScrollContainer extends HTMLElement {\n    constructor() {\n        super();\n        const sheet = new CSSStyleSheet();\n        sheet.replaceSync(`\n        :host {\n            display: block;\n            position: relative;\n            height: 100%;\n            width: 100%;\n        }\n        \n        .wrapper {\n            position: absolute;\n            top: 0;\n            right: 0;\n            bottom: 0;\n            left: 0;\n            overflow-y: clip;\n        }\n\n        .secondWrapper {\n            height: 100%;\n            overflow-y: auto;\n        }\n\n        `\n        );\n        const shadow = this.attachShadow({ mode: 'open' });\n        this.shadowRoot.adoptedStyleSheets = [sheet];\n\n        const wrapper = document.createElement('div');\n        wrapper.classList.add('wrapper');\n\n        const secondWrapper = document.createElement('div');\n        secondWrapper.classList.add('secondWrapper');\n\n        const slot = document.createElement('slot');\n\n        secondWrapper.append(slot)\n        wrapper.append(secondWrapper);\n        this.shadowRoot.append(wrapper);\n    }\n}\n;// CONCATENATED MODULE: ./src/index.js\n\n\n\n\n\n\n\n\n\n\n\ncustomElements.define('scroll-container', ScrollContainer);\n\nconst sidebarHook = document.querySelector(\".sidebar\");\nconst contentHook = document.querySelector(\".content\");\n\nconst proxyWrapper = new ChangeListenerProxy();\nconst storageWrapper = new StorageWrapper(localStorage);\nconst modelFactory = new ModelFactory();\nconst modelProxyFactory = new ProxyFactory(modelFactory, (item) => {return proxyWrapper.wrapObject(item)})\nconst loadFactory = new LoadFactory(modelProxyFactory);\n\nconst popUpElement = document.createElement('div');\nconst popUpLayer = new PopupLayer(popUpElement);\n\nconst elementFactory = new ElementFactory(modelProxyFactory, popUpLayer);\n\nconst data = storageWrapper.getTodo()\nlet todo;\nif (data) {\n    todo = loadFactory.loadTodo(data);\n} else {\n    todo = modelProxyFactory.createTodo(modelProxyFactory.createProject('Inbox'), modelProxyFactory.createProjectCollection());\n}\n\n// This sets current and future object proxies to refer to this callback\nproxyWrapper.setCallback(() => {storageWrapper.saveTodo(todo)});\n\ndocument.body.append(popUpElement);\nsidebarHook.append(elementFactory.buildTodo(todo, contentHook));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///197\n")}},__webpack_exports__={};__webpack_modules__[197]()})();